   /**
     * METHOD: promptSecondMenu
     * IMPORT: pSelection (int), pRecordsArray (CovidRecord[])
     * EXPORT: none
     * ASSERTION: Prompts user for a second menu selection and calls the appropriate method
     */
    private static void promptMenuPerGroup(Scanner pInput, CovidRecord[] pRecordsArray)
    {
        int secondSelection;
        boolean validSelection = true;
        // Exeption handling for non-integer user input
        try
        {   
            // Do-while loop to keep asking for valid menu selection if user inputs integer out of range
            do 
            {
                System.out.println("\n=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n" +
                                   "Please select from a statistic below:\n" +
                                   "> 1. Total number of cumulatively positive cases\n" +
                                   "> 2. Total number of cumulatively deceased cases\n" +
                                   "> 3. Total number of cumulatively recovered cases\n" +
                                   "> 4. Average daily number of currently positive cases\n" +
                                   "> 5. Number and percentage of cumulatively positive cases recovered\n" +
                                   "> 6. Number and percentage of cumulatively positive cases deceased\n" +
                                   "> 7. All of the above statistics\n" +
                                   "Enter selection: ");
                secondSelection = pInput.nextInt();

                // Switch statement for second menu selection
                switch (secondSelection)
                {
                    case 1:
                        System.out.println("\n===========================================" +
                                           "\nTotal number of cumulatively positive cases" +
                                           "\n===========================================");
                        int num = getNumOfCountriesInContinent(pRecordsArray);
                        String[] cream = getCountryNames(pRecordsArray, num);
                        for (int i =0; i < cream.length; i++)
                        {
                            System.out.println(cream[i]);
                        }
                        System.out.println(num);
                    break;
                    case 2:
                        System.out.println("\n===========================================" +
                                           "\nTotal number of cumulatively deceased cases" +
                                           "\n===========================================");
                    break;
                    case 3:
                        System.out.println("\n============================================" +
                                           "\nTotal number of cumulatively recovered cases" +
                                           "\n============================================");
                    break;
                    case 4:
                        System.out.println("\n================================================" +
                                           "\nAverage daily number of currently positive cases" +
                                           "\n================================================");
                    break;
                    case 5:
                        System.out.println("\n===============================================" +
                                           "\n     Number and percentage of cumulatively     " + 
                                           "\n            positive cases recovered           " +
                                           "\n===============================================");
                    break;
                    case 6:
                        System.out.println("\n===============================================" +
                                           "\n     Number and percentage of cumulatively     " + 
                                           "\n            positive cases deceased            " +
                                           "\n===============================================");
                    break;
                    case 7:
                        System.out.println("\n=====================================" +
                                           "\n     All of the above statistics     " +
                                           "\n=====================================");
                    break;
                    default: // Default to re-enter a menu choice from 1 to 7
                        System.out.println("Invalid selection. Please re-enter a number from 1 to 7.\n");
                        validSelection = false;
                    break;
                }   
            }   while (!(validSelection));
        }
        catch (InputMismatchException exception) // Program will display a message and terminate after an incorrect input
        {
            System.out.println("\nInvalid input: " + exception +
                               "\nProgram will stop executing. Goodbye!");
        }
    }  // End promptMenuPerGroup



    // get the number of countries in a given array
    private static int getNumOfCountriesInContinent(CovidRecord[] pRecordsArray)
    {
        String firstCountry = pRecordsArray[0].getCountry().getCountryName();
        int numOfCountries = 1;
        String currentCountry = "";

        while (!(currentCountry.equals(firstCountry)))
        {
            numOfCountries++; 
                currentCountry = pRecordsArray[numOfCountries].getCountry().getCountryName();
                 
        }
        return numOfCountries;
    }
    // get name of countries in a given array
    private static String[] getCountryNames(CovidRecord[] pRecordsArray, int pNumOfCountries)
    {
        String[] countryNames = new String[pNumOfCountries];
        for (int i = 0; i < pRecordsArray.length; i++)
        {
            for (int j = i + 1; j < pRecordsArray.length; j++)
            {
                if (pRecordsArray[i].getCountry().getCountryName().equals(pRecordsArray[j].getCountry().getCountryName()))
                {
                    countryNames[i] = pRecordsArray[i].getCountry().getCountryName();
                }
            }
        }
        return countryNames;
    }

    /**
     * METHOD: getTotalCountries
     * IMPORT: pRecordsArray (CovidRecord[]), pContinent (String)
     * EXPORT: totalCountries (int)
     * ASSERTION: Counts the number of countries in a continent
     */
    private static int getTotalCountries(CovidRecord[] pRecordsArray, String pContinent)
    {
        int totalCountries = 0;
        for (int i = 0; i < pRecordsArray.length; i++)
        {
            if (pRecordsArray[i].getCountry().getContinent().equals(pContinent))
            {
                totalCountries++;
            }
        }
        return totalCountries;
    }   // End getTotalCountries

    /**
     * METHOD: fillContinentArray
     * IMPORT: pRecordsArray (CovidRecord[]), pContinentArray (CoviRecord[]), pContinent (String)
     * EXPORT: none
     * ASSERTION: Fills an array with CovidRecord objects of countries in a continent
     */
    private static void fillContinentArray(CovidRecord[] pRecordsArray, CovidRecord[] pContinentArray, String pContinent)
    {
        int continentArrayIndex = 0;
        for (int i = 0; i < pRecordsArray.length; i++)
        {
            if (pRecordsArray[i].getCountry().getContinent().equals(pContinent))
            {
                pContinentArray[continentArrayIndex] = pRecordsArray[i];
                continentArrayIndex++;
            }
        }
    }   // End fillContinentArray


System.out.println("\nEnter the date (dd/MM/yyyy or dd/MM/yyyy): ");
                        date = input.nextLine();
                        numOfDateRecords = getTotalDateRecords(recordsArray, date);
                        CovidRecord[] recordsDate = new CovidRecord[numOfDateRecords];
                        fillDateArray(recordsArray, recordsDate, date);
                        promptSecondMenu(input, recordsDate);


   public static void main(String[] arg)
    {
        // Local variables
        String fileName = "jrc-covid-19-all-days-of-world_ASSIGNMENT-FIXED.csv";
        int numOfRecords, numOfCountries, numOfDateRecords, selection;
        String asia = "AS";
        String europe = "EU";
        String africa = "AF";
        String southAmerica = "SA";
        String northAmerica = "NA";
        String oceania = "OC";
        
        // Open file for reading and get the number of records for array size
        numOfRecords = readFile(fileName);

        // Create array of CovidRecord objects then load data from file
        CovidRecord[] recordsArray = new CovidRecord[numOfRecords];
        loadData(fileName, recordsArray);

        // Exception handling for invalid data type and integer greater than max integer value in Java 
        // during menu option selection.   
        try 
        {
            Scanner input = new Scanner(System.in);
            // Do-while loop to repeat program until exit condition (user chooses exit option 10)
            do
            {
                System.out.printf("**************************************************************************\n" +
                                  "|    Welcome to the JRC COVID-19 Analysis Program. There are a total of   |\n" +
                                  "|  ‘%d’ records loaded. Please make a selection from the Menu below to  |\n" +
                                  "|                  choose which area (or date) to analyse:                |\n" +
                                  "**************************************************************************\n\n" +
                                  "> 1. All countries\n" +
                                  "> 2. Countries in South America\n" +
                                  "> 3. Countries in North America\n" +
                                  "> 4. Countries in Oceania\n" +
                                  "> 5. Countries in Asia\n" +
                                  "> 6. Countries in Africa\n" +
                                  "> 7. Countries in Europe\n" +
                                  "> 8. Enter a Country\n" +
                                  "> 9. Enter a Date\n" +
                                  "> 10. Exit the Program\n" +
                                  "Enter selection: ", numOfRecords); 
                selection = input.nextInt();
                input.nextLine();   // Clear the buffer
                
                // Switch statement for first menu selection
                switch (selection)
                {
                    case 1:
                        promptSecondMenu(input, recordsArray);
                    break;
                    case 2: 
                        numOfCountries = getTotalCountries(recordsArray, southAmerica);
                        CovidRecord[] recordsSA = new CovidRecord[numOfCountries];
                        fillContinentArray(recordsArray, recordsSA, southAmerica);
                        promptSecondMenu(input, recordsSA);
                    break;
                    case 3:
                        numOfCountries = getTotalCountries(recordsArray, northAmerica);
                        CovidRecord[] recordsNA = new CovidRecord[numOfCountries];
                        fillContinentArray(recordsArray, recordsNA, northAmerica);
                        promptSecondMenu(input, recordsNA);
                    break;
                    case 4:
                        numOfCountries = getTotalCountries(recordsArray, oceania);
                        CovidRecord[] recordsOC = new CovidRecord[numOfCountries];
                        fillContinentArray(recordsArray, recordsOC, oceania);
                        promptSecondMenu(input, recordsOC);
                    break;
                    case 5:
                        numOfCountries = getTotalCountries(recordsArray, asia);
                        CovidRecord[] recordsAS = new CovidRecord[numOfCountries];
                        fillContinentArray(recordsArray, recordsAS, asia);
                        promptSecondMenu(input, recordsAS);
                    break;
                    case 6:
                        numOfCountries = getTotalCountries(recordsArray, africa);
                        CovidRecord[] recordsAF = new CovidRecord[numOfCountries];
                        fillContinentArray(recordsArray, recordsAF, africa);
                        promptSecondMenu(input, recordsAF);
                    break;
                    case 7:
                        numOfCountries = getTotalCountries(recordsArray, europe);
                        CovidRecord[] recordsEU = new CovidRecord[numOfCountries];
                        fillContinentArray(recordsArray, recordsEU, europe);
                        promptSecondMenu(input, recordsEU);
                    break;
                    case 8:
                        promptMenuPerCountry(input, recordsArray);
                    break;
                    case 9:
                        
                    break;
                    case 10:
                        System.out.println("\n=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=" +
                                           "\nThank you for using the JRC COVID-19 Analysis Program!");
                    break;
                    default: // Default to re-enter a menu choice from 1 to 10
                        System.out.println("Invalid selection. Please re-enter a number from 1 to 10.\n");
                    break;
                }   
            }   while (selection != 10);    
            input.close();
        }
        catch (InputMismatchException exception) // Program will display a message and terminate after an incorrect input
        {
            System.out.println("\nInvalid input: " + exception +
                               "\nProgram will stop executing. Goodbye!");
        }
    }   // End main


