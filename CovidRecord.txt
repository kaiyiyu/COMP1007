-------------------------------------------------------------------------------------------------------
Author: Kai-Yu Yu
Purpose: Pseudocode for CovidRecord class
Date: 14/05/2022
-------------------------------------------------------------------------------------------------------
BEGIN CovidRecord
    INSTANCE VARIABLES
        String date
        int cumulativePositive
        int cumulativeDeceased
        int cumulativeRecovered
        int currentlyPositive
        int hospitalized
        int intensiveCare
        Country country
    --------------------------------------------------------------------------------------------------------
    CONSTRUCTOR WITH PARAMETERS
    IMPORT: pDate (String), pCumulativePositive (int), pCumulativeDeceased (int), 
            pCumulativeRecovered (int), pCurrentlyPositive (int), pHospitalized (int), 
            pIntensiveCare (int), pCountry (Country)
    EXPORT: none
    ASSERTION: Creates a CovidRecord object with imported values and validates the values
    ALGORITHM:
        setDate(pDate)
        setCumulativePositive(pCumulativePositive)
        setCumulativeDeceased(pCumulativeDeceased)
        setCumulativeRecovered(pCumulativeRecovered)
        setCurrentlyPositive(pCurrentlyPositive)
        setHospitalized(pHospitalized)
        setIntensiveCare(pIntensiveCare)
        setCountry(pCountry)
    END CONSTRUCTOR WITH PARAMETERS
    --------------------------------------------------------------------------------------------------------
    COPY CONSTRUCTOR
    IMPORT: pCovidRecord (CovidRecord)
    EXPORT: none
    ASSERTION: Creates a copy of the CovidRecord object 
    ALGORITHM:
        date = pCovidRecord.getDate()
        cumulativePositive = pCovidRecord.getCumulativePositive()
        cumulativeDeceased = pCovidRecord.getCumulativeDeceased()
        cumulativeRecovered = pCovidRecord.getCumulativeRecovered()
        currentlyPositive = pCovidRecord.getCurrentlyPositive()
        hospitalized = pCovidRecord.getHospitalized()
        intensiveCare = pCovidRecord.getIntensiveCare()
        country = pCovidRecord.getCountry()
    END COPY CONSTRUCTOR
    --------------------------------------------------------------------------------------------------------
    DEFAULT CONSTRUCTOR
    IMPORT: none
    EXPORT: none
    ASSERTION: Creates a CovidRecord object with default values
    ALGORITHM:
        date = "" 
        cumulativePositive = 0
        cumulativeDeceased = 0
        cumulativeRecovered = 0
        currentlyPositive = 0
        hospitalized = 0
        intensiveCare = 0
        country = NEW Country
    END DEFAULT CONSTRUCTOR
    --------------------------------------------------------------------------------------------------------
    ACCESSOR: getDate
    IMPORT: none
    EXPORT: date (String)
    ASSERTION: Returns the date of the CovidRecord object
    ALGORITHM    
        RETURN date
    END getDate
    --------------------------------------------------------------------------------------------------------    
    ACCESSOR: getCumulativePositive
    IMPORT: none
    EXPORT: cumulativePositive (int)
    ASSERTION: Returns the cumulative positive cases of the CovidRecord object
    ALGORITHM:
        RETURN cumulativePositive
    END getCumulativePositive
    --------------------------------------------------------------------------------------------------------
    ACCESSOR: getCumulativeDeceased
    IMPORT: none
    EXPORT: cumulativeDeceased (int)
    ASSERTION: Returns the cumulative deceased cases of the CovidRecord object
    ALGORITHM:
        RETURN cumulativeDeceased
    END getCumulativeDeceased
    --------------------------------------------------------------------------------------------------------
    ACCESSOR: getCumulativeRecovered
    IMPORT: none
    EXPORT: cumulativeRecovered (int)
    ASSERTION: Returns the cumulative recovered cases of the CovidRecord object
        RETURN cumulativeRecovered
    END getCumulativeRecovered
    --------------------------------------------------------------------------------------------------------
    ACCESSOR: getCurrentlyPositive
    IMPORT: none
    EXPORT: currentlyPositive (int)
    ASSERTION: Returns the currently positive cases of the CovidRecord object
    ALGORITHM:
        RETURN currentlyPositive
    END getCurrentlyPositive
    --------------------------------------------------------------------------------------------------------
    ACCESSOR: getHospitalized
    IMPORT: none
    EXPORT: hospitalized (int)
    ASSERTION: Returns the number of hospitalized cases of the CovidRecord object
    ALGORITHM:
        RETURN hospitalized
    END getHospitalized
    --------------------------------------------------------------------------------------------------------
    ACCESSOR: getIntensiveCare
    IMPORT: none
    EXPORT: intensiveCare (int)
    ASSERTION: Returns the number of intensive care cases of the CovidRecord object
    ALGORITHM:
        RETURN intensiveCare
    END intensiveCare
    --------------------------------------------------------------------------------------------------------
    ACCESSOR: getCountry
    IMPORT: none
    EXPORT: country (Country)
    ASSERTION: Returns a copy of the aggregated Country object of the CovidRecord object
               using a COPY CONSTRUCTOR
    ALGORITHM: 
        Country tempCountry = NEW Country(country)
        
        RETURN tempCountry
    END getCountry
    --------------------------------------------------------------------------------------------------------
    ACCESSOR: getVisited
    IMPORT: none
    EXPORT: visited (boolean)
    ASSERTION: Returns the visited status of the CovidRecord object 
    ALGORITHM:
        RETURN visited
    END getVisited
    --------------------------------------------------------------------------------------------------------
    ACCESSOR: toString
    IMPORT: none
    EXPORT: covidRecordString (String)
    ASSERTION: Returns a string representation of the CovidRecord object       
    ALGORITHM: 
        String covidRecordString
        covidRecordString = "Date is " + date +
                            "Cumulative Positive is " + cumulativePositive + 
                            "Cumulative Deceased is " + cumulativeDeceased + 
                            "Cumulative Recovered is " + cumulativeRecovered + 
                            "Currently Positive is " + currentlyPositive + 
                            "Hospitalized is " + hospitalized + 
                            "Intensive Care is " + intensiveCare + 
                            "Country is " + country.toString()

        RETURN covidRecordString
    END toString
    --------------------------------------------------------------------------------------------------------
    ACCESSOR: equals
    IMPORT: inObject (Object)
    EXPORT: isEqual (Boolean)
    ASSERTION: Returns true IF the two objects are equivalent
    ALGORITHM: 
        boolean isEqual = false
        CovidRecord inCovidRecord = null
        
        IF (inObject IS INSTANCE OF CovidRecord) THEN
            inCovidRecord = (CovidRecord) inObject

            IF (date.equals(inCovidRecord.getDate()) AND
                cumulativePositive == inCovidRecord.getCumulativePositive() AND
                cumulativeDeceased == inCovidRecord.getCumulativeDeceased() AND
                cumulativeRecovered == inCovidRecord.getCumulativeRecovered() AND
                currentlyPositive == inCovidRecord.getCurrentlyPositive() AND
                hospitalized == inCovidRecord.getHospitalized() AND
                intensiveCare == inCovidRecord.getIntensiveCare() AND
                country.equals(inCovidRecord.getCountry()) THEN
                    isEqual = true

        RETURN isEqual
    END equals
    --------------------------------------------------------------------------------------------------------
    MUTATOR: setDate
    IMPORT: pDate (String)
    EXPORT: none
    ASSERTION: State of date is updated to pDate value
    ALGORITHM: 
        IF ((firstValidateDate(pDate) IS NOT true) AND (secondValidateDate(pDate) IS NOT true)) THEN
            THROW Illegal Argument Exception
            OUTPUT "Invalid date format."
        ELSE
            date = pDate
    END setDate
    --------------------------------------------------------------------------------------------------------
    MUTATOR: setCumulativePositive
    IMPORT: pCumulativePositive (int)
    EXPORT: none
    ASSERTION: State of cumulativePositive is updated to pCumulativePositive value
    ALGORITHM: 
        IF (pCumulativePositive LESS THAN 0) THEN
            THROW Illegal Argument Exception
            OUTPUT "Cumulative Positive cases cannot be negative."
        ELSE
            cumulativePositive = pCumulativePositive
    END setCumulativePositive
    --------------------------------------------------------------------------------------------------------
    MUTATOR: setCumulativeDeceased
    IMPORT: pCumulativeDeceased (int)
    EXPORT: none
    ASSERTION: State of cumulativeDeceased is updated to pCumulativeDeceased value
    ALGORITHM: 
        IF (pCumulativeDeceased LESS THAN 0) THEN
            THROW Illegal Argument Exception
            OUTPUT "Cumulative Deceased cases cannot be negative."
        ELSE
            cumulativeDeceased = pCumulativeDeceased
    END setCumulativeDeceased
    --------------------------------------------------------------------------------------------------------
    MUTATOR: setCumulativeRecovered
    IMPORT: pCumulativeRecovered (int)
    EXPORT: none
    ASSERTION: State of cumulativeRecovered is updated to pCumulativeRecovered value
    ALGORITHM:
        IF (pCumulativeRecovered LESS THAN 0) THEN
            THROW Illegal Argument Exception
            OUTPUT "Cumulative Recovered cases cannot be negative."
        ELSE
            cumulativeRecovered = pCumulativeRecovered
    END setCumulativeRecovered
    --------------------------------------------------------------------------------------------------------
    MUTATOR: setCurrentlyPositive
    IMPORT: pCurrentlyPositive (int)
    EXPORT: none
    ASSERTION: State of currentlyPositive is updated to pCurrentlyPositive value
    ALGORITHM: 
        IF (pCurrentlyPositive LESS THAN 0) THEN
            THROW Illegal Argument Exception
            OUTPUT "Currently Positive cases cannot be negative."
        ELSE
            currentlyPositive = pCurrentlyPositive
    END setCurrentlyPositive
    --------------------------------------------------------------------------------------------------------
    MUTATOR: setHospitalized
    IMPORT: pHospitalized (int)
    EXPORT: none
    ASSERTION: State of hospitalized is updated to pHospitalized value
    ALGORITHM: 
        IF (pHospitalized LESS THAN 0) THEN
            THROW Illegal Argument Exception
            OUTPUT "Hospitalized cases cannot be negative."
        ELSE
            hospitalized = pHospitalized
    END setHospitalized
    --------------------------------------------------------------------------------------------------------
    MUTATOR: setIntensiveCare
    IMPORT: pIntensiveCare (int)
    EXPORT: none
    ASSERTION: State of intensiveCare is updated to pIntensiveCare value
    ALGORITHM: 
        IF (pIntensiveCare LESS THAN 0) THEN
            THROW Illegal Argument Exception
            OUTPUT "Intensive Care cases cannot be negative."
        ELSE
            intensiveCare = pIntensiveCare
    END setIntensiveCare
    --------------------------------------------------------------------------------------------------------
    MUTATOR: setCountry
    IMPORT: pCountry (Country)
    EXPORT: none
    ASSERTION: State of country is updated to pCountry value
    ALGORITHM: 
        IF (pCountry == null) THEN
            THROW Illegal Argument Exception
            OUTPUT "Country cannot be null.
        ELSE
            country = pCountry
    END setCountry
    --------------------------------------------------------------------------------------------------------
    MUTATOR: setVisited
    IMPORT: pVisited (Boolean)
    EXPORT: none
    ASSERTION: State of visited is updated to pVisited value
    ALGORITHM:
        visited = pVisited
    END setVisited
    --------------------------------------------------------------------------------------------------------
    METHOD: firstValidateDate
    IMPORT: date (String)
    EXPORT: isValid (Boolean)
    ASSERTION: Returns true IF String date is valid for dd/m/yyyy format
    ALGORITHM:
        String firstDateFormat = "dd/M/yyyy"
        boolean isValid = false
        
        TRY
            SimpleDateFormat df = NEW SimpleDateFormat(firstDateFormat)
            df.setLenient(false)
            df.parse(date)
            isValid = true
        CATCH EXCEPTION ParseException as exception
            OUTPUT "Error in parsing" 

        RETURN isValid
    END firstValidateDate
    --------------------------------------------------------------------------------------------------------
    METHOD: secondValidateDate
    IMPORT: date (String)
    EXPORT: isValid (Boolean)
    ASSERTION: Returns true if String date is valid for dd/mm/yyyy format
    ALGORITHM:
        String secondDateFormat = "dd/MM/yyyy"
        boolean isValid = false
        
        TRY
            SimpleDateFormat df = NEW SimpleDateFormat(secondDateFormat)
            df.setLenient(false)
            df.parse(date)
            isValid = true
        CATCH EXCEPTION ParseException as exception
            OUTPUT "Error in parsing" 
            
        RETURN isValid
    END secondValidateDate
    --------------------------------------------------------------------------------------------------------
END CovidRecord CLASS
--------------------------------------------------------------------------------------------------------